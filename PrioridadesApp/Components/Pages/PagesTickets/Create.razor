@page "/T_Create"
@using System.Linq.Expressions
@rendermode InteractiveServer
@inject TicketsServices ticketsServices
@attribute [StreamRendering]
@inject ClientesServices clientesServices;
@inject PrioridadesServices prioridadesServices;
@inject NavigationManager NavigationManager;


<EditForm Model="ticket" OnValidSubmit="Crear">
    <div class="card">
        <div class="card-header">
            <h1>Registro Tickets</h1>
		
            <div class="d-flex align-items-start ">
                <a href="/T_details"><em>Detalles</em></a>
			</div>
			
						
					</div>
				</div>
            <div>
                <label>Fecha:</label>
                <InputDate @bind-Value="ticket.Fecha" class="form-control"></InputDate>
						
						
						
			</div>
            <div>
                <label>ClienteId:</label>
                <InputNumber @bind-Value="ticket.ClienteId" class="form-control"></InputNumber>
						

					</div>
            <div>
                <label>SistemaId:</label>
                <InputNumber @bind-Value="ticket.SistemaId" class="form-control"></InputNumber>
				</div>
            <div>
                <label>PrioridadId:</label>
                <InputNumber @bind-Value="ticket.PriodidadID" class="form-control"></InputNumber>
						
                @if (Existe)
							{
                    <p class="text-danger">Ya existe un ticket con esta prioridad.</p>
							}
					</div>
            <div>
		<label class="form-label" for="solicitado"><strong>Solicitado Por:</strong></label>
		<InputSelect id="solicitado" class="form-select" @bind-Value="ticket.SolicitadoPor" @oninput="(e) => ActualizarClienteId(e.Value.ToString())">
			<option>------------------</option>
			@foreach (var clientes in clientesList)
			{
				<option value="@clientes.Nombres">@clientes.Nombres</option>
			}
		</InputSelect>
					</div>
            <div>
                <label>Asunto:</label>
                <InputText @bind-Value="ticket.Asunto" class="form-control"></InputText>


				</div>
           <div class="mb-3">
					<div class="col-4">
						
						<label class="form-label" for="descripcion"><strong>Descripci&oacute;n:</strong></label>
						<InputSelect id="descripcion" class="form-select" @bind-Value="ticket.Descripcion" @oninput="(e) => ActualizarPrioridadId(e.Value.ToString())">
							<option>------------------</option>
							@foreach(var prioridades in prioridadesList)
							{
								<option value="@prioridades.Descripcion">@prioridades.Descripcion</option>
							}
						</InputSelect>
					</div>
			</div>
	<div class="card-footer">
            <button type="submit" class="btn btn-success">Crear <i class="bi bi-floppy-fill" /></button>
		</div>
	
</EditForm>


@code {

    public Tickets ticket { get; set; } = new Tickets();
    public string mensaje { get; set; } = string.Empty;
    public List<Clientes> clientesList = new List<Clientes>();
    public List<Prioridades> prioridadesList = new List<Prioridades>();
    private bool Existe = false;


    protected override async Task OnInitializedAsync()
    {

        await Task.Delay(300);
        Expression<Func<Clientes, bool>> criterioCliente = cliente => cliente.ClienteId > 0;
		clientesList = await clientesServices.GetList(criterioCliente);

        Expression<Func<Prioridades, bool>> criterioPrioridad = prioridad => prioridad.PriodidadID > 0;
		prioridadesList = await prioridadesServices.GetList(criterioPrioridad);
    }
    
    
    public async Task Buscar()
	{
		var ticketEncontrado = await ticketsServices.Buscar(ticket.TicketId);
        if (ticketEncontrado != null)
		{
            this.ticket = ticketEncontrado;
		}
	}

    void Nuevo()
	{
        this.ticket = new Tickets();
	}

    public async Task<bool> Validar()
			{
        
		Existe = (await ticketsServices.GetList(c => c.PriodidadID! == ticket.PriodidadID!
       && c.TicketId != ticket.TicketId)).Any();
        return Existe;


	}



    public async Task Crear()
	{
        if (await Validar())
			{
            return;
	    }
		if (await ticketsServices.Crear(this.ticket))
	    {
		NavigationManager.NavigateTo("/tickets");
	    }
    }

	public async Task ActualizarClienteId(string valor)
	{
		if (valor != null)
		{
			var buscar = await clientesServices.BuscarCliente(valor);
			if (buscar != null)
			{
				var id = await clientesServices.BuscarId(buscar.ClienteId);
				if (id != null)
					ticket.ClienteId = id.ClienteId;
			}
		}
	}

	public async Task ActualizarPrioridadId(string valor)
	{
		if (valor != null)
		{
			var buscar = await prioridadesServices.BuscarDescripcion(valor);//Busco la descripcion
			if (buscar != null)
			{
				var id = await prioridadesServices.BuscarId(buscar.PriodidadID);//Busco el Id
				if (id != null)
					ticket.PriodidadID = id.PriodidadID;
			}
		}
	}
}